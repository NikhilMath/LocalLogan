import { visit } from "unist-util-visit";
const MDX_ELEMENTS = ["mdxJsxFlowElement", "mdxJsxTextElement"];
function rehypeJsx() {
  return function(node) {
    visit(node, "element", (child) => {
      child.tagName = `${child.tagName}`;
    });
    visit(node, MDX_ELEMENTS, (child, index, parent) => {
      if (index === null || !Boolean(parent))
        return;
      const attrs = child.attributes.reduce((acc, entry) => {
        let attr = entry.value;
        if (attr && typeof attr === "object") {
          attr = `{${attr.value}}`;
        } else if (attr && entry.type === "mdxJsxExpressionAttribute") {
          attr = `{${attr}}`;
        } else if (attr === null) {
          attr = "";
        } else if (typeof attr === "string") {
          attr = `"${attr}"`;
        }
        if (!entry.name) {
          return acc + ` ${attr}`;
        }
        return acc + ` ${entry.name}${attr ? "=" : ""}${attr}`;
      }, "");
      if (child.children.length === 0) {
        child.type = "raw";
        child.value = `<${child.name}${attrs} />`;
        return;
      }
      const openingTag = {
        type: "raw",
        value: `
<${child.name}${attrs}>`
      };
      const closingTag = {
        type: "raw",
        value: `</${child.name}>
`
      };
      parent.children.splice(index, 1, openingTag, ...child.children, closingTag);
    });
  };
}
export {
  rehypeJsx as default
};
