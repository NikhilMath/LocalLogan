---
export interface Props {}

const {} = Astro.props;
---

<div class="chat-button">
  <button>Chat</button>
</div>

<div class="chat-window">
  <div class="chat-header">
    <h2>Chat</h2>
    <button class="close-button">Close</button>
  </div>
  <div class="chat-messages"></div>
  <div class="chat-input">
    <input type="text" placeholder="Type your message..." />
    <button>Send</button>
  </div>
</div>

<script>
  const chatButton = document.querySelector(
    ".chat-button button"
  ) as HTMLElement;
  const chatWindow = document.querySelector(".chat-window") as HTMLElement;
  const closeButton = document.querySelector(".close-button") as HTMLElement;
  const messageList = document.querySelector(".chat-messages") as HTMLElement;
  const messageInput = document.querySelector(
    ".chat-input input"
  ) as HTMLInputElement;
  const sendButton = document.querySelector(
    ".chat-input button"
  ) as HTMLInputElement;

  let messages = [];

  function displayMessages() {
    messageList.innerHTML = "";
    for (let i = 0; i < messages.length; i++) {
      const message = messages[i];
      const div = document.createElement("div");
      div.className = "chat-message";
      const senderSpan = document.createElement("span");
      senderSpan.className = "sender";
      senderSpan.textContent = message.sender + ":";
      const messageSpan = document.createElement("span");
      messageSpan.textContent = message.message;
      div.appendChild(senderSpan);
      div.appendChild(messageSpan);
      messageList.appendChild(div);
    }
    messageList.scrollTop = messageList.scrollHeight;
  }

  function sendMessage() {
    const message = messageInput.value;
    if (message.trim() !== "") {
      messages.push({ sender: "Me", message });
      displayMessages();
      // add chat bot here..
      messageInput.value = "";
    }
  }

  chatButton.addEventListener("click", () => {
    chatWindow.style.display = "block";
  });

  closeButton.addEventListener("click", () => {
    chatWindow.style.display = "none";
  });

  sendButton.addEventListener("click", () => {
    sendMessage();
  });

  messageInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      sendMessage();
    }
  });

  displayMessages();
</script>

<style>
  .chat-button {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 999;
  }

  .chat-button button {
    font-size: 18px;
    background-color: rgba(33, 37, 41);
    color: #fff;
    border: none;
    border-radius: 25px;
    padding: 10px 20px;
    cursor: pointer;
  }

  .chat-window {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 999;
    width: 300px;
    height: 400px;
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    display: none;
  }

  .chat-header {
    padding: 10px;
    background-color: #ffd3b3;
    color: rgba(33, 37, 41);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .chat-header h2 {
    margin: 0;
    font-size: 20px;
  }

  .chat-messages {
    overflow-y: auto;
    padding: 10px;
    height: 280px;
  }

  .chat-message {
    margin-bottom: 10px;
  }

  .chat-message .sender {
    font-weight: bold;
    margin-right: 5px;
  }

  .chat-input {
    display: flex;
    align-items: center;
    padding: 10px;
  }

  .chat-input input {
    flex-grow: 1;
    padding: 10px;
    border: none;
    border-radius: 5px;
    margin-right: 10px;
  }

  .chat-input button {
    background-color: #ffd3b3;
    color: #000;
    border: none;
    border-radius: 25px;
    padding: 10px 20px;
    cursor: pointer;
  }

  .close-button {
    border-radius: 12px;
    border: none;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    font-size: small;
  }
</style>
